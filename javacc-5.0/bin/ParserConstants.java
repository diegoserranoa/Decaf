/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int TOK_BOOLEAN = 7;
  /** RegularExpression Id. */
  int TOK_BREAK = 8;
  /** RegularExpression Id. */
  int TOK_CALLOUT = 9;
  /** RegularExpression Id. */
  int TOK_CLASS = 10;
  /** RegularExpression Id. */
  int TOK_CONTINUE = 11;
  /** RegularExpression Id. */
  int TOK_ELSE = 12;
  /** RegularExpression Id. */
  int TOK_FALSE = 13;
  /** RegularExpression Id. */
  int TOK_FOR = 14;
  /** RegularExpression Id. */
  int TOK_IF = 15;
  /** RegularExpression Id. */
  int TOK_INT = 16;
  /** RegularExpression Id. */
  int TOK_RETURN = 17;
  /** RegularExpression Id. */
  int TOK_TRUE = 18;
  /** RegularExpression Id. */
  int TOK_VOID = 19;
  /** RegularExpression Id. */
  int TOK_PROGRAM = 20;
  /** RegularExpression Id. */
  int TOK_STRING_LITERAL = 21;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 22;
  /** RegularExpression Id. */
  int TOK_NOT = 23;
  /** RegularExpression Id. */
  int TOK_PLUS = 24;
  /** RegularExpression Id. */
  int TOK_MINUS = 25;
  /** RegularExpression Id. */
  int TOK_MULTIPLY = 26;
  /** RegularExpression Id. */
  int TOK_DIVIDE = 27;
  /** RegularExpression Id. */
  int TOK_MODULE = 28;
  /** RegularExpression Id. */
  int TOK_LESSER = 29;
  /** RegularExpression Id. */
  int TOK_GREATER = 30;
  /** RegularExpression Id. */
  int TOK_LESSER_OR_EQUAL = 31;
  /** RegularExpression Id. */
  int TOK_GREATER_OR_EQUAL = 32;
  /** RegularExpression Id. */
  int TOK_EQUAL_EQUAL = 33;
  /** RegularExpression Id. */
  int TOK_NOT_EQUAL = 34;
  /** RegularExpression Id. */
  int TOK_AND = 35;
  /** RegularExpression Id. */
  int TOK_OR = 36;
  /** RegularExpression Id. */
  int TOK_ASSIGN = 37;
  /** RegularExpression Id. */
  int TOK_ADD_ASIGN = 38;
  /** RegularExpression Id. */
  int TOK_SUB_ASSIGN = 39;
  /** RegularExpression Id. */
  int TOK_COMMA = 40;
  /** RegularExpression Id. */
  int TOK_DOT = 41;
  /** RegularExpression Id. */
  int TOK_LEFT_PAREN = 42;
  /** RegularExpression Id. */
  int TOK_RIGHT_PAREN = 43;
  /** RegularExpression Id. */
  int TOK_LEFT_BRACKET = 44;
  /** RegularExpression Id. */
  int TOK_RIGHT_BRACKET = 45;
  /** RegularExpression Id. */
  int TOK_LEFT_BRACE = 46;
  /** RegularExpression Id. */
  int TOK_RIGHT_BRACE = 47;
  /** RegularExpression Id. */
  int TOK_SEMICOLON = 48;
  /** RegularExpression Id. */
  int TOK_QUOTE = 49;
  /** RegularExpression Id. */
  int TOK_DOUBLE_QUOTE = 50;
  /** RegularExpression Id. */
  int TOK_SCAPED_QUOTE = 51;
  /** RegularExpression Id. */
  int TOK_SCAPED_DOUBLE_QUOTE = 52;
  /** RegularExpression Id. */
  int TOK_SCAPED_SLASH = 53;
  /** RegularExpression Id. */
  int ID = 54;
  /** RegularExpression Id. */
  int TOK_LETTER = 55;
  /** RegularExpression Id. */
  int TOK_DIGIT = 56;
  /** RegularExpression Id. */
  int TOK_HEX = 57;
  /** RegularExpression Id. */
  int TOK_NUMBERS = 58;
  /** RegularExpression Id. */
  int CHARACTER = 59;
  /** RegularExpression Id. */
  int ALPHANUM = 60;
  /** RegularExpression Id. */
  int SCAPED_CHARACTER = 61;
  /** RegularExpression Id. */
  int SLASH = 62;
  /** RegularExpression Id. */
  int TOK_SYMBOL = 63;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"boolean\"",
    "\"break\"",
    "\"callout\"",
    "\"class\"",
    "\"continue\"",
    "\"else\"",
    "\"false\"",
    "\"for\"",
    "\"if\"",
    "\"int\"",
    "\"return\"",
    "\"true\"",
    "\"void\"",
    "\"Program\"",
    "<TOK_STRING_LITERAL>",
    "<CHARACTER_LITERAL>",
    "\"!\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"&&\"",
    "\"||\"",
    "\"=\"",
    "\"+=\"",
    "\"-=\"",
    "\",\"",
    "\".\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "\"\\\\\\\'\"",
    "\"\\\\\\\"\"",
    "\"\\\\\\\\\"",
    "<ID>",
    "<TOK_LETTER>",
    "<TOK_DIGIT>",
    "<TOK_HEX>",
    "<TOK_NUMBERS>",
    "<CHARACTER>",
    "<ALPHANUM>",
    "<SCAPED_CHARACTER>",
    "\"\\\\\"",
    "<TOK_SYMBOL>",
  };

}
