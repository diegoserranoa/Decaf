/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();static boolean DEBUG_PARSER = false;
        public static void main(String[] args) {
                Parser parser;
                SimpleNode  root = null;
                try {
                                FileInputStream file = null;
                                try{
                                        file = new FileInputStream(args[0]);
                                        if(file != null){
                                                parser = new Parser(file);
                                                parser.start();
                                                System.out.println("Successful parsing.");

                                                root = (SimpleNode) parser.jjtree.rootNode();
                                                root.dump("");

                                                try{
                                                        Semantico semantico = new Semantico();
                                                        root.jjtAccept(semantico, null);
                                                        semantico.tablaSimbolos();

                                                } catch (Throwable e){
                                                        System.out.println("Error: " + e.getMessage());
                                                }
                                        }
                                } catch (Throwable e) {
                                        System.out.println("Error: " + e.getMessage());
                                }
                } catch (Throwable e) {
                        System.out.println("Syntax Error: " + e.getMessage());
                }
        }

  static final public void start() throws ParseException {
    program();
    jj_consume_token(0);
  }

  static final public void program() throws ParseException {
 /*@bgen(jjtree) PROGRAM */
  ASTPROGRAM jjtn000 = new ASTPROGRAM(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TOK_CLASS);
      jj_consume_token(TOK_PROGRAM);
      jj_consume_token(TOK_LEFT_BRACE);
      label_1:
      while (true) {
        if (jj_2_1(3)) {
          ;
        } else {
          break label_1;
        }
        field_decl();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TOK_BOOLEAN:
        case TOK_INT:
        case TOK_VOID:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_2;
        }
        method_decl();
      }
      jj_consume_token(TOK_RIGHT_BRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void field_decl() throws ParseException {
 /*@bgen(jjtree) GLOBAL_DECLARATION */
  ASTGLOBAL_DECLARATION jjtn000 = new ASTGLOBAL_DECLARATION(JJTGLOBAL_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      type();
      field_decl_unit();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TOK_COMMA:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_3;
        }
        jj_consume_token(TOK_COMMA);
        field_decl_unit();
      }
      jj_consume_token(TOK_SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void field_decl_unit() throws ParseException {
 /*@bgen(jjtree) DECLARATION */
  ASTDECLARATION jjtn000 = new ASTDECLARATION(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      id();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOK_LEFT_BRACKET:
        jj_consume_token(TOK_LEFT_BRACKET);
                                    ASTID_SIZE jjtn001 = new ASTID_SIZE(JJTID_SIZE);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
        try {
          int_literal();
        } catch (Throwable jjte001) {
                                    if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte001;}
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte001;}
                                    }
                                    {if (true) throw (Error)jjte001;}
        } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001, true);
                                    }
        }
        jj_consume_token(TOK_RIGHT_BRACKET);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void method_decl() throws ParseException {
 /*@bgen(jjtree) METHOD_DECLARATION */
  ASTMETHOD_DECLARATION jjtn000 = new ASTMETHOD_DECLARATION(JJTMETHOD_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOK_BOOLEAN:
      case TOK_INT:
        type();
        break;
      case TOK_VOID:
                    ASTTYPE_VOID jjtn001 = new ASTTYPE_VOID(JJTTYPE_VOID);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(TOK_VOID);
        } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
        }
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      id();
      jj_consume_token(TOK_LEFT_PAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOK_BOOLEAN:
      case TOK_INT:
        type();
        id();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TOK_COMMA:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_4;
          }
          jj_consume_token(TOK_COMMA);
          type();
          id();
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(TOK_RIGHT_PAREN);
      block();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void block() throws ParseException {
 /*@bgen(jjtree) BLOCK */
  ASTBLOCK jjtn000 = new ASTBLOCK(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TOK_LEFT_BRACE);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TOK_BOOLEAN:
        case TOK_INT:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        var_decl();
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TOK_BREAK:
        case TOK_CALLOUT:
        case TOK_CONTINUE:
        case TOK_FOR:
        case TOK_IF:
        case TOK_RETURN:
        case TOK_LEFT_BRACE:
        case ID:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_6;
        }
        statement();
      }
      jj_consume_token(TOK_RIGHT_BRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void var_decl() throws ParseException {
 /*@bgen(jjtree) VARIABLE_DECLARATION */
  ASTVARIABLE_DECLARATION jjtn000 = new ASTVARIABLE_DECLARATION(JJTVARIABLE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      type();
      id();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TOK_COMMA:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_7;
        }
        jj_consume_token(TOK_COMMA);
        id();
      }
      jj_consume_token(TOK_SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOK_INT:
          ASTTYPE_INT jjtn001 = new ASTTYPE_INT(JJTTYPE_INT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(TOK_INT);
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      break;
    case TOK_BOOLEAN:
          ASTTYPE_BOOLEAN jjtn002 = new ASTTYPE_BOOLEAN(JJTTYPE_BOOLEAN);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(TOK_BOOLEAN);
      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void statement() throws ParseException {
    if (jj_2_2(3)) {
      assignment();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOK_CALLOUT:
      case ID:
        method_call();
        jj_consume_token(TOK_SEMICOLON);
        break;
      case TOK_IF:
          ASTIF jjtn001 = new ASTIF(JJTIF);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(TOK_IF);
          jj_consume_token(TOK_LEFT_PAREN);
          expr();
          jj_consume_token(TOK_RIGHT_PAREN);
          block();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TOK_ELSE:
            jj_consume_token(TOK_ELSE);
            block();
            break;
          default:
            jj_la1[10] = jj_gen;
            ;
          }
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
        break;
      case TOK_FOR:
          ASTFOR jjtn002 = new ASTFOR(JJTFOR);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(TOK_FOR);
          id();
          jj_consume_token(TOK_ASSIGN);
          expr();
          jj_consume_token(TOK_COMMA);
          expr();
          block();
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
        break;
      case TOK_RETURN:
          ASTRETURN jjtn003 = new ASTRETURN(JJTRETURN);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(TOK_RETURN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TOK_CALLOUT:
          case TOK_FALSE:
          case TOK_TRUE:
          case CHARACTER_LITERAL:
          case TOK_NOT:
          case TOK_MINUS:
          case TOK_LEFT_PAREN:
          case ID:
          case TOK_HEX:
          case TOK_NUMBERS:
            expr();
            break;
          default:
            jj_la1[11] = jj_gen;
            ;
          }
          jj_consume_token(TOK_SEMICOLON);
        } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
        }
        break;
      case TOK_BREAK:
          ASTBREAK jjtn004 = new ASTBREAK(JJTBREAK);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
        try {
          jj_consume_token(TOK_BREAK);
          jj_consume_token(TOK_SEMICOLON);
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
        }
        break;
      case TOK_CONTINUE:
          ASTCONTINUE jjtn005 = new ASTCONTINUE(JJTCONTINUE);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
        try {
          jj_consume_token(TOK_CONTINUE);
          jj_consume_token(TOK_SEMICOLON);
        } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
          }
        }
        break;
      case TOK_LEFT_BRACE:
        block();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void assignment() throws ParseException {
    location();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOK_ASSIGN:
      jj_consume_token(TOK_ASSIGN);
                          ASTASSIGN jjtn001 = new ASTASSIGN(JJTASSIGN);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
      try {
        expr();
      } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
      } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
      }
      break;
    case TOK_ADD_ASIGN:
      jj_consume_token(TOK_ADD_ASIGN);
                                                                ASTADD_ASSIGN jjtn002 = new ASTADD_ASSIGN(JJTADD_ASSIGN);
                                                                boolean jjtc002 = true;
                                                                jjtree.openNodeScope(jjtn002);
      try {
        expr();
      } catch (Throwable jjte002) {
                                                                if (jjtc002) {
                                                                  jjtree.clearNodeScope(jjtn002);
                                                                  jjtc002 = false;
                                                                } else {
                                                                  jjtree.popNode();
                                                                }
                                                                if (jjte002 instanceof RuntimeException) {
                                                                  {if (true) throw (RuntimeException)jjte002;}
                                                                }
                                                                if (jjte002 instanceof ParseException) {
                                                                  {if (true) throw (ParseException)jjte002;}
                                                                }
                                                                {if (true) throw (Error)jjte002;}
      } finally {
                                                                if (jjtc002) {
                                                                  jjtree.closeNodeScope(jjtn002,  2);
                                                                }
      }
      break;
    case TOK_SUB_ASSIGN:
      jj_consume_token(TOK_SUB_ASSIGN);
                                                                                                           ASTSUB_ASSIGN jjtn003 = new ASTSUB_ASSIGN(JJTSUB_ASSIGN);
                                                                                                           boolean jjtc003 = true;
                                                                                                           jjtree.openNodeScope(jjtn003);
      try {
        expr();
      } catch (Throwable jjte003) {
                                                                                                           if (jjtc003) {
                                                                                                             jjtree.clearNodeScope(jjtn003);
                                                                                                             jjtc003 = false;
                                                                                                           } else {
                                                                                                             jjtree.popNode();
                                                                                                           }
                                                                                                           if (jjte003 instanceof RuntimeException) {
                                                                                                             {if (true) throw (RuntimeException)jjte003;}
                                                                                                           }
                                                                                                           if (jjte003 instanceof ParseException) {
                                                                                                             {if (true) throw (ParseException)jjte003;}
                                                                                                           }
                                                                                                           {if (true) throw (Error)jjte003;}
      } finally {
                                                                                                           if (jjtc003) {
                                                                                                             jjtree.closeNodeScope(jjtn003,  2);
                                                                                                           }
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(TOK_SEMICOLON);
  }

  static final public void method_call() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
          ASTMETHOD_CALL jjtn001 = new ASTMETHOD_CALL(JJTMETHOD_CALL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        method_name();
        jj_consume_token(TOK_LEFT_PAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TOK_CALLOUT:
        case TOK_FALSE:
        case TOK_TRUE:
        case CHARACTER_LITERAL:
        case TOK_NOT:
        case TOK_MINUS:
        case TOK_LEFT_PAREN:
        case ID:
        case TOK_HEX:
        case TOK_NUMBERS:
          expr();
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case TOK_COMMA:
              ;
              break;
            default:
              jj_la1[14] = jj_gen;
              break label_8;
            }
            jj_consume_token(TOK_COMMA);
            expr();
          }
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        jj_consume_token(TOK_RIGHT_PAREN);
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      break;
    case TOK_CALLOUT:
          ASTCALLOUT jjtn002 = new ASTCALLOUT(JJTCALLOUT);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(TOK_CALLOUT);
        jj_consume_token(TOK_LEFT_PAREN);
        string_literal();
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TOK_COMMA:
            ;
            break;
          default:
            jj_la1[16] = jj_gen;
            break label_9;
          }
          jj_consume_token(TOK_COMMA);
          callout_arg();
        }
        jj_consume_token(TOK_RIGHT_PAREN);
      } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
      }
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void method_name() throws ParseException {
    id();
  }

  static final public void location() throws ParseException {
    if (jj_2_3(3)) {
      id();
      jj_consume_token(TOK_LEFT_BRACKET);
      expr();
                                          ASTLOCATION_OFFSET jjtn001 = new ASTLOCATION_OFFSET(JJTLOCATION_OFFSET);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(TOK_RIGHT_BRACKET);
      } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  2);
                                          }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        id();
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void expr() throws ParseException {
    expr_conditional_and();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOK_OR:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_10;
      }
      jj_consume_token(TOK_OR);
                            ASTOR jjtn001 = new ASTOR(JJTOR);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
      try {
        expr_conditional_and();
      } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte001;}
                            }
                            if (jjte001 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte001;}
                            }
                            {if (true) throw (Error)jjte001;}
      } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
                            }
      }
    }
  }

  static final public void expr_conditional_and() throws ParseException {
    expr_equality();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOK_AND:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_11;
      }
      jj_consume_token(TOK_AND);
                             ASTAND jjtn001 = new ASTAND(JJTAND);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
      try {
        expr_equality();
      } catch (Throwable jjte001) {
                             if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte001;}
                             }
                             if (jjte001 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte001;}
                             }
                             {if (true) throw (Error)jjte001;}
      } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  2);
                             }
      }
    }
  }

  static final public void expr_equality() throws ParseException {
    expr_relational();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOK_EQUAL_EQUAL:
      case TOK_NOT_EQUAL:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOK_EQUAL_EQUAL:
        jj_consume_token(TOK_EQUAL_EQUAL);
                                     ASTEQUAL jjtn001 = new ASTEQUAL(JJTEQUAL);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
        try {
          expr_relational();
        } catch (Throwable jjte001) {
                                     if (jjtc001) {
                                       jjtree.clearNodeScope(jjtn001);
                                       jjtc001 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte001 instanceof RuntimeException) {
                                       {if (true) throw (RuntimeException)jjte001;}
                                     }
                                     if (jjte001 instanceof ParseException) {
                                       {if (true) throw (ParseException)jjte001;}
                                     }
                                     {if (true) throw (Error)jjte001;}
        } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001,  2);
                                     }
        }
        break;
      case TOK_NOT_EQUAL:
        jj_consume_token(TOK_NOT_EQUAL);
                                   ASTNOT_EQUAL jjtn002 = new ASTNOT_EQUAL(JJTNOT_EQUAL);
                                   boolean jjtc002 = true;
                                   jjtree.openNodeScope(jjtn002);
        try {
          expr_relational();
        } catch (Throwable jjte002) {
                                   if (jjtc002) {
                                     jjtree.clearNodeScope(jjtn002);
                                     jjtc002 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte002 instanceof RuntimeException) {
                                     {if (true) throw (RuntimeException)jjte002;}
                                   }
                                   if (jjte002 instanceof ParseException) {
                                     {if (true) throw (ParseException)jjte002;}
                                   }
                                   {if (true) throw (Error)jjte002;}
        } finally {
                                   if (jjtc002) {
                                     jjtree.closeNodeScope(jjtn002,  2);
                                   }
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void expr_relational() throws ParseException {
    expr_addition_subtraction();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOK_LESSER:
      case TOK_GREATER:
      case TOK_LESSER_OR_EQUAL:
      case TOK_GREATER_OR_EQUAL:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOK_GREATER:
        jj_consume_token(TOK_GREATER);
                                 ASTGREATER jjtn001 = new ASTGREATER(JJTGREATER);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
        try {
          expr_addition_subtraction();
        } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte001;}
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte001;}
                                 }
                                 {if (true) throw (Error)jjte001;}
        } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                 }
        }
        break;
      case TOK_GREATER_OR_EQUAL:
        jj_consume_token(TOK_GREATER_OR_EQUAL);
                                          ASTGREATER_OR_EQUAL jjtn002 = new ASTGREATER_OR_EQUAL(JJTGREATER_OR_EQUAL);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
        try {
          expr_addition_subtraction();
        } catch (Throwable jjte002) {
                                          if (jjtc002) {
                                            jjtree.clearNodeScope(jjtn002);
                                            jjtc002 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte002 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte002;}
                                          }
                                          if (jjte002 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte002;}
                                          }
                                          {if (true) throw (Error)jjte002;}
        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  2);
                                          }
        }
        break;
      case TOK_LESSER:
        jj_consume_token(TOK_LESSER);
                                ASTLESSER jjtn003 = new ASTLESSER(JJTLESSER);
                                boolean jjtc003 = true;
                                jjtree.openNodeScope(jjtn003);
        try {
          expr_addition_subtraction();
        } catch (Throwable jjte003) {
                                if (jjtc003) {
                                  jjtree.clearNodeScope(jjtn003);
                                  jjtc003 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte003 instanceof RuntimeException) {
                                  {if (true) throw (RuntimeException)jjte003;}
                                }
                                if (jjte003 instanceof ParseException) {
                                  {if (true) throw (ParseException)jjte003;}
                                }
                                {if (true) throw (Error)jjte003;}
        } finally {
                                if (jjtc003) {
                                  jjtree.closeNodeScope(jjtn003,  2);
                                }
        }
        break;
      case TOK_LESSER_OR_EQUAL:
        jj_consume_token(TOK_LESSER_OR_EQUAL);
                                         ASTLESSER_OR_EQUAL jjtn004 = new ASTLESSER_OR_EQUAL(JJTLESSER_OR_EQUAL);
                                         boolean jjtc004 = true;
                                         jjtree.openNodeScope(jjtn004);
        try {
          expr_addition_subtraction();
        } catch (Throwable jjte004) {
                                         if (jjtc004) {
                                           jjtree.clearNodeScope(jjtn004);
                                           jjtc004 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte004 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte004;}
                                         }
                                         if (jjte004 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte004;}
                                         }
                                         {if (true) throw (Error)jjte004;}
        } finally {
                                         if (jjtc004) {
                                           jjtree.closeNodeScope(jjtn004,  2);
                                         }
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void expr_addition_subtraction() throws ParseException {
    expr_mult_div_remainder();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOK_PLUS:
      case TOK_MINUS:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOK_PLUS:
        jj_consume_token(TOK_PLUS);
                              ASTPLUS jjtn001 = new ASTPLUS(JJTPLUS);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
        try {
          expr_mult_div_remainder();
        } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte001;}
                              }
                              if (jjte001 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte001;}
                              }
                              {if (true) throw (Error)jjte001;}
        } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
        }
        break;
      case TOK_MINUS:
        jj_consume_token(TOK_MINUS);
                               ASTMINUS jjtn002 = new ASTMINUS(JJTMINUS);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
        try {
          expr_mult_div_remainder();
        } catch (Throwable jjte002) {
                               if (jjtc002) {
                                 jjtree.clearNodeScope(jjtn002);
                                 jjtc002 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte002 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte002;}
                               }
                               if (jjte002 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte002;}
                               }
                               {if (true) throw (Error)jjte002;}
        } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002,  2);
                               }
        }
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void expr_mult_div_remainder() throws ParseException {
    expr_logical_not();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOK_MULTIPLY:
      case TOK_DIVIDE:
      case TOK_MODULE:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOK_MULTIPLY:
        jj_consume_token(TOK_MULTIPLY);
                                  ASTTIMES jjtn001 = new ASTTIMES(JJTTIMES);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
        try {
          expr_logical_not();
        } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte001;}
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte001;}
                                  }
                                  {if (true) throw (Error)jjte001;}
        } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                  }
        }
        break;
      case TOK_DIVIDE:
        jj_consume_token(TOK_DIVIDE);
                                ASTOVER jjtn002 = new ASTOVER(JJTOVER);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
        try {
          expr_logical_not();
        } catch (Throwable jjte002) {
                                if (jjtc002) {
                                  jjtree.clearNodeScope(jjtn002);
                                  jjtc002 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte002 instanceof RuntimeException) {
                                  {if (true) throw (RuntimeException)jjte002;}
                                }
                                if (jjte002 instanceof ParseException) {
                                  {if (true) throw (ParseException)jjte002;}
                                }
                                {if (true) throw (Error)jjte002;}
        } finally {
                                if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002,  2);
                                }
        }
        break;
      case TOK_MODULE:
        jj_consume_token(TOK_MODULE);
                                ASTMODULE jjtn003 = new ASTMODULE(JJTMODULE);
                                boolean jjtc003 = true;
                                jjtree.openNodeScope(jjtn003);
        try {
          expr_logical_not();
        } catch (Throwable jjte003) {
                                if (jjtc003) {
                                  jjtree.clearNodeScope(jjtn003);
                                  jjtc003 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte003 instanceof RuntimeException) {
                                  {if (true) throw (RuntimeException)jjte003;}
                                }
                                if (jjte003 instanceof ParseException) {
                                  {if (true) throw (ParseException)jjte003;}
                                }
                                {if (true) throw (Error)jjte003;}
        } finally {
                                if (jjtc003) {
                                  jjtree.closeNodeScope(jjtn003,  2);
                                }
        }
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void expr_logical_not() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOK_NOT:
      jj_consume_token(TOK_NOT);
                    ASTLOGICAL_NOT jjtn001 = new ASTLOGICAL_NOT(JJTLOGICAL_NOT);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
      try {
        expr_unary_minus();
      } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte001;}
                    }
                    if (jjte001 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte001;}
                    }
                    {if (true) throw (Error)jjte001;}
      } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  1);
                    }
      }
      break;
    case TOK_CALLOUT:
    case TOK_FALSE:
    case TOK_TRUE:
    case CHARACTER_LITERAL:
    case TOK_MINUS:
    case TOK_LEFT_PAREN:
    case ID:
    case TOK_HEX:
    case TOK_NUMBERS:
      expr_unary_minus();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expr_unary_minus() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOK_MINUS:
      jj_consume_token(TOK_MINUS);
                      ASTUNARY_MINUS jjtn001 = new ASTUNARY_MINUS(JJTUNARY_MINUS);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
      try {
        prime();
      } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte001;}
                      }
                      if (jjte001 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte001;}
                      }
                      {if (true) throw (Error)jjte001;}
      } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  1);
                      }
      }
      break;
    case TOK_CALLOUT:
    case TOK_FALSE:
    case TOK_TRUE:
    case CHARACTER_LITERAL:
    case TOK_LEFT_PAREN:
    case ID:
    case TOK_HEX:
    case TOK_NUMBERS:
      prime();
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void location_or_method_call() throws ParseException {
    if (jj_2_4(2)) {
      method_call();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        location();
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOK_CALLOUT:
    case ID:
      location_or_method_call();
      break;
    case TOK_FALSE:
    case TOK_TRUE:
    case CHARACTER_LITERAL:
    case TOK_HEX:
    case TOK_NUMBERS:
      literal();
      break;
    case TOK_LEFT_PAREN:
      jj_consume_token(TOK_LEFT_PAREN);
      expr();
      jj_consume_token(TOK_RIGHT_PAREN);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void callout_arg() throws ParseException {
    if (jj_2_5(2)) {
      expr();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOK_STRING_LITERAL:
        string_literal();
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void literal() throws ParseException {
    if (jj_2_6(2)) {
      int_literal();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARACTER_LITERAL:
        char_literal();
        break;
      case TOK_FALSE:
      case TOK_TRUE:
        bool_literal();
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void id() throws ParseException {
 /*@bgen(jjtree) ID */
  ASTID jjtn000 = new ASTID(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(ID);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.value = token.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void int_literal() throws ParseException {
    if (jj_2_7(3)) {
      decimal_literal();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOK_HEX:
        hex_literal();
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void decimal_literal() throws ParseException {
 /*@bgen(jjtree) DECIMAL_LITERAL */
  ASTDECIMAL_LITERAL jjtn000 = new ASTDECIMAL_LITERAL(JJTDECIMAL_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(TOK_NUMBERS);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.value = token.image; System.out.println("DECIMAL:" + jjtn000.value);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void hex_literal() throws ParseException {
 /*@bgen(jjtree) HEX_LITERAL */
  ASTHEX_LITERAL jjtn000 = new ASTHEX_LITERAL(JJTHEX_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(TOK_HEX);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                            jjtn000.value = token.image; System.out.println("HEX:" + jjtn000.value);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void bool_literal() throws ParseException {
 /*@bgen(jjtree) BOOL_LITERAL */
  ASTBOOL_LITERAL jjtn000 = new ASTBOOL_LITERAL(JJTBOOL_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token token;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOK_TRUE:
        token = jj_consume_token(TOK_TRUE);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             jjtn000.value = token.image; System.out.println("BOOL:" + jjtn000.value);
        break;
      case TOK_FALSE:
        token = jj_consume_token(TOK_FALSE);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              jjtn000.value = token.image; System.out.println("BOOL:" + jjtn000.value);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void char_literal() throws ParseException {
 /*@bgen(jjtree) CHARACTER_LITERAL */
  ASTCHARACTER_LITERAL jjtn000 = new ASTCHARACTER_LITERAL(JJTCHARACTER_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(CHARACTER_LITERAL);
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                       jjtn000.value = token.image; System.out.println("CHAR:" + jjtn000.value);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void string_literal() throws ParseException {
 /*@bgen(jjtree) STRING_LITERAL */
  ASTSTRING_LITERAL jjtn000 = new ASTSTRING_LITERAL(JJTSTRING_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(TOK_STRING_LITERAL);
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                       jjtn000.value = token.image; System.out.println("STRING:" + jjtn000.value);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(TOK_SUB_ASSIGN)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(TOK_MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(TOK_PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(TOK_BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(TOK_INT)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(TOK_COMMA)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(TOK_LESSER_OR_EQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(TOK_LESSER)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_49()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(TOK_GREATER_OR_EQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(TOK_GREATER)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_77()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(TOK_FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_scan_token(TOK_TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(TOK_NOT_EQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(TOK_EQUAL_EQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(TOK_LEFT_BRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(TOK_HEX)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_18()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(TOK_NUMBERS)) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_76()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(TOK_AND)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_23()) return true;
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(TOK_SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(TOK_ADD_ASIGN)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(TOK_OR)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(TOK_LEFT_BRACKET)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_scan_token(TOK_LEFT_PAREN)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(TOK_CALLOUT)) return true;
    if (jj_scan_token(TOK_LEFT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_40()) return true;
    if (jj_scan_token(TOK_LEFT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(TOK_ASSIGN)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(TOK_MINUS)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(TOK_MODULE)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(TOK_DIVIDE)) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(TOK_NOT)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(TOK_MULTIPLY)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[37];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x90080,0x0,0x0,0x90080,0x0,0x10080,0x10080,0x2cb00,0x0,0x10080,0x1000,0x2c42200,0x2cb00,0x0,0x0,0x2c42200,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0xe0000000,0xe0000000,0x3000000,0x3000000,0x1c000000,0x1c000000,0x2c42200,0x2442200,0x0,0x442200,0x200000,0x442000,0x0,0x42000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x100,0x1000,0x0,0x100,0x0,0x0,0x404000,0x100,0x0,0x0,0x6400400,0x404000,0xe0,0x100,0x6400400,0x100,0x400000,0x400000,0x10,0x8,0x6,0x6,0x1,0x1,0x0,0x0,0x0,0x0,0x6400400,0x6400400,0x400000,0x6400400,0x0,0x0,0x2000000,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[7];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[64];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 37; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 64; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
