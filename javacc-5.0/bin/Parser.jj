/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*/options {
	//DEBUG_PARSER = false;
	DEBUG_LOOKAHEAD = false;
	               
	             

}

PARSER_BEGIN(Parser)

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();

/*@egen*/
	static boolean DEBUG_PARSER = false;
	public static void main(String[] args) {
		Parser parser;
		SimpleNode  root = null;
		try {
				FileInputStream file = null;
				try{
					file = new FileInputStream(args[0]);
					if(file != null){
						parser = new Parser(file);
						parser.start();
						System.out.println("Successful parsing.");
						
						root = (SimpleNode) parser.jjtree.rootNode();
						root.dump("");
						
						try{
							Semantico semantico = new Semantico();
							root.jjtAccept(semantico, null);
							semantico.tablaSimbolos();

						} catch (Throwable e){
							System.out.println("Error: " + e.getMessage());
						}
					}
				} catch (Throwable e) {
					System.out.println("Error: " + e.getMessage());
				}
		} catch (Throwable e) {
			System.out.println("Syntax Error: " + e.getMessage());
		}
	}
}

PARSER_END(Parser)

SKIP:
{
	<"//"(["a"-"z","A"-"Z","0"-"9",".",",","!","@","#","$","%","^","&","*","(",")","_","-","+","=",";",":","\""," "])*("\n" | "\r" | "\r\n")>
|	" "
|	"\t"
|	"\n"
|	"\r"
|	"\f"
}

TOKEN:
{
	<TOK_BOOLEAN: "boolean">
|	<TOK_BREAK: "break">
|	<TOK_CALLOUT: "callout">
|	<TOK_CLASS: "class">
|	<TOK_CONTINUE: "continue">
|	<TOK_ELSE: "else">
|	<TOK_FALSE: "false">
|	<TOK_FOR: "for">
|	<TOK_IF: "if">
|	<TOK_INT: "int">
|	<TOK_RETURN: "return">
|	<TOK_TRUE: "true">
|	<TOK_VOID: "void">
|	<TOK_PROGRAM: "Program">
|	<TOK_STRING_LITERAL: <TOK_DOUBLE_QUOTE> (<CHARACTER>)* <TOK_DOUBLE_QUOTE> >
|	<CHARACTER_LITERAL: <TOK_QUOTE> (<CHARACTER>)* <TOK_QUOTE> >
|	<TOK_NOT: "!">
|	<TOK_PLUS: "+">
|	<TOK_MINUS: "-">
|	<TOK_MULTIPLY: "*">
|	<TOK_DIVIDE: "/">
|	<TOK_MODULE: "%">
|	<TOK_LESSER: "<">
|	<TOK_GREATER: ">">
|	<TOK_LESSER_OR_EQUAL: "<=">
|	<TOK_GREATER_OR_EQUAL: ">=">
|	<TOK_EQUAL_EQUAL: "==">
|	<TOK_NOT_EQUAL: "!=">
|	<TOK_AND: "&&">
|	<TOK_OR: "||">
|	<TOK_ASSIGN: "=">
|	<TOK_ADD_ASIGN: "+=">
|	<TOK_SUB_ASSIGN: "-=">
|	<TOK_COMMA: ",">
|	<TOK_DOT: ".">
|	<TOK_LEFT_PAREN: "(">
|	<TOK_RIGHT_PAREN: ")">
|	<TOK_LEFT_BRACKET: "[">
|	<TOK_RIGHT_BRACKET: "]">
|	<TOK_LEFT_BRACE: "{">
|	<TOK_RIGHT_BRACE: "}">
|	<TOK_SEMICOLON: ";">
|	<TOK_QUOTE:  "'">
|	<TOK_DOUBLE_QUOTE: "\"">
|	<TOK_SCAPED_QUOTE: "\\\'">
|	<TOK_SCAPED_DOUBLE_QUOTE: "\\\"">
|	<TOK_SCAPED_SLASH: "\\\\">
|	<ID: <TOK_LETTER> (<TOK_LETTER>|<TOK_DIGIT>)* >
|	<TOK_LETTER: ["a"-"z","A"-"Z","_"]>
|	<#TOK_DIGIT: ["0"-"9"]>
|	<TOK_HEX: "0x" (["0"-"9","a"-"f","A"-"F"])+>
|	<TOK_NUMBERS: <TOK_DIGIT>(<TOK_DIGIT>)*>
|	<#CHARACTER: <ALPHANUM>|<TOK_SYMBOL>|<SCAPED_CHARACTER>|<SLASH>|<TOK_HEX> > 
|	<ALPHANUM: <TOK_DIGIT> | <TOK_LETTER > >
|	<SCAPED_CHARACTER: <SLASH>(<TOK_QUOTE>|<TOK_DOUBLE_QUOTE>|<SLASH>) >
|	<#SLASH: "\\">
|	<TOK_SYMBOL: [" ","!","#","$","%","&","(",")","*","+",",","-",".","/",":",";","<","=",">","?","@","[","]","^","{","|","}","~","`"]>
}

void start()      :
{}
{
	program() <EOF>
}

void program()         :
{/*@bgen(jjtree) PROGRAM */
  ASTPROGRAM jjtn000 = new ASTPROGRAM(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PROGRAM */
        try {
/*@egen*/
	<TOK_CLASS> <TOK_PROGRAM> <TOK_LEFT_BRACE> (LOOKAHEAD(3) field_decl())*  (method_decl())* <TOK_RIGHT_BRACE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void field_decl()                    : 
{/*@bgen(jjtree) GLOBAL_DECLARATION */
  ASTGLOBAL_DECLARATION jjtn000 = new ASTGLOBAL_DECLARATION(JJTGLOBAL_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GLOBAL_DECLARATION */
        try {
/*@egen*/
	type() field_decl_unit() (<TOK_COMMA> field_decl_unit() )* <TOK_SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void field_decl_unit()             :
{/*@bgen(jjtree) DECLARATION */
  ASTDECLARATION jjtn000 = new ASTDECLARATION(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DECLARATION */
        try {
/*@egen*/
	id() (<TOK_LEFT_BRACKET> (/*@bgen(jjtree) ID_SIZE */
                                  {
                                    ASTID_SIZE jjtn001 = new ASTID_SIZE(JJTID_SIZE);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*/int_literal()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte001) {
                                    if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte001;
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      throw (ParseException)jjte001;
                                    }
                                    throw (Error)jjte001;
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001, true);
                                    }
                                  }
/*@egen*/         ) <TOK_RIGHT_BRACKET>)?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void method_decl()                    : 
{/*@bgen(jjtree) METHOD_DECLARATION */
  ASTMETHOD_DECLARATION jjtn000 = new ASTMETHOD_DECLARATION(JJTMETHOD_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) METHOD_DECLARATION */
        try {
/*@egen*/
	(type() |/*@bgen(jjtree) TYPE_VOID */
                  {
                    ASTTYPE_VOID jjtn001 = new ASTTYPE_VOID(JJTTYPE_VOID);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/ <TOK_VOID>/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
                  }
/*@egen*/           ) id() <TOK_LEFT_PAREN> (type() id() (<TOK_COMMA> type() id())*)? <TOK_RIGHT_PAREN> block()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void block()       : 
{/*@bgen(jjtree) BLOCK */
  ASTBLOCK jjtn000 = new ASTBLOCK(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BLOCK */
        try {
/*@egen*/
	<TOK_LEFT_BRACE> (var_decl())* (statement())* <TOK_RIGHT_BRACE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void var_decl()                      : 
{/*@bgen(jjtree) VARIABLE_DECLARATION */
  ASTVARIABLE_DECLARATION jjtn000 = new ASTVARIABLE_DECLARATION(JJTVARIABLE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VARIABLE_DECLARATION */
        try {
/*@egen*/
	type() id() (<TOK_COMMA> id())* <TOK_SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void type()      : 
{}
{/*@bgen(jjtree) TYPE_INT */
        {
          ASTTYPE_INT jjtn001 = new ASTTYPE_INT(JJTTYPE_INT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	<TOK_INT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/          
|/*@bgen(jjtree) TYPE_BOOLEAN */
        {
          ASTTYPE_BOOLEAN jjtn002 = new ASTTYPE_BOOLEAN(JJTTYPE_BOOLEAN);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/	<TOK_BOOLEAN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/              
}

void statement()      : 
{}
{	LOOKAHEAD(3)
	assignment()
|	method_call() <TOK_SEMICOLON>
|/*@bgen(jjtree) IF */
        {
          ASTIF jjtn001 = new ASTIF(JJTIF);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/	(<TOK_IF> <TOK_LEFT_PAREN> expr() <TOK_RIGHT_PAREN> block() (<TOK_ELSE> block())?)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/    
|/*@bgen(jjtree) FOR */
        {
          ASTFOR jjtn002 = new ASTFOR(JJTFOR);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/	(<TOK_FOR> id() <TOK_ASSIGN> expr() <TOK_COMMA> expr() block())/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/     
|/*@bgen(jjtree) RETURN */
        {
          ASTRETURN jjtn003 = new ASTRETURN(JJTRETURN);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*/	(<TOK_RETURN> (expr())? <TOK_SEMICOLON>)/*@bgen(jjtree)*/
        } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            throw (RuntimeException)jjte003;
          }
          if (jjte003 instanceof ParseException) {
            throw (ParseException)jjte003;
          }
          throw (Error)jjte003;
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
        }
/*@egen*/        
|/*@bgen(jjtree) BREAK */
        {
          ASTBREAK jjtn004 = new ASTBREAK(JJTBREAK);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
        }
        try {
/*@egen*/	(<TOK_BREAK> <TOK_SEMICOLON>)/*@bgen(jjtree)*/
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
        }
/*@egen*/       
|/*@bgen(jjtree) CONTINUE */
        {
          ASTCONTINUE jjtn005 = new ASTCONTINUE(JJTCONTINUE);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
        }
        try {
/*@egen*/	(<TOK_CONTINUE> <TOK_SEMICOLON>)/*@bgen(jjtree)*/
        } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
          }
        }
/*@egen*/          
|	block()
}

void assignment()      :
{}
{
	(location() 
	( (<TOK_ASSIGN>/*@bgen(jjtree) #ASSIGN( 2) */
                        {
                          ASTASSIGN jjtn001 = new ASTASSIGN(JJTASSIGN);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                        }
                        try {
/*@egen*/ expr()/*@bgen(jjtree)*/
                        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            throw (RuntimeException)jjte001;
                          }
                          if (jjte001 instanceof ParseException) {
                            throw (ParseException)jjte001;
                          }
                          throw (Error)jjte001;
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
                        }
/*@egen*/           ) | (<TOK_ADD_ASIGN>/*@bgen(jjtree) #ADD_ASSIGN( 2) */
                                                              {
                                                                ASTADD_ASSIGN jjtn002 = new ASTADD_ASSIGN(JJTADD_ASSIGN);
                                                                boolean jjtc002 = true;
                                                                jjtree.openNodeScope(jjtn002);
                                                              }
                                                              try {
/*@egen*/ expr()/*@bgen(jjtree)*/
                                                              } catch (Throwable jjte002) {
                                                                if (jjtc002) {
                                                                  jjtree.clearNodeScope(jjtn002);
                                                                  jjtc002 = false;
                                                                } else {
                                                                  jjtree.popNode();
                                                                }
                                                                if (jjte002 instanceof RuntimeException) {
                                                                  throw (RuntimeException)jjte002;
                                                                }
                                                                if (jjte002 instanceof ParseException) {
                                                                  throw (ParseException)jjte002;
                                                                }
                                                                throw (Error)jjte002;
                                                              } finally {
                                                                if (jjtc002) {
                                                                  jjtree.closeNodeScope(jjtn002,  2);
                                                                }
                                                              }
/*@egen*/               ) | (<TOK_SUB_ASSIGN>/*@bgen(jjtree) #SUB_ASSIGN( 2) */
                                                                                                         {
                                                                                                           ASTSUB_ASSIGN jjtn003 = new ASTSUB_ASSIGN(JJTSUB_ASSIGN);
                                                                                                           boolean jjtc003 = true;
                                                                                                           jjtree.openNodeScope(jjtn003);
                                                                                                         }
                                                                                                         try {
/*@egen*/ expr()/*@bgen(jjtree)*/
                                                                                                         } catch (Throwable jjte003) {
                                                                                                           if (jjtc003) {
                                                                                                             jjtree.clearNodeScope(jjtn003);
                                                                                                             jjtc003 = false;
                                                                                                           } else {
                                                                                                             jjtree.popNode();
                                                                                                           }
                                                                                                           if (jjte003 instanceof RuntimeException) {
                                                                                                             throw (RuntimeException)jjte003;
                                                                                                           }
                                                                                                           if (jjte003 instanceof ParseException) {
                                                                                                             throw (ParseException)jjte003;
                                                                                                           }
                                                                                                           throw (Error)jjte003;
                                                                                                         } finally {
                                                                                                           if (jjtc003) {
                                                                                                             jjtree.closeNodeScope(jjtn003,  2);
                                                                                                           }
                                                                                                         }
/*@egen*/               ) )
	<TOK_SEMICOLON> 		)
}

void method_call()      : 
{}
{/*@bgen(jjtree) METHOD_CALL */
        {
          ASTMETHOD_CALL jjtn001 = new ASTMETHOD_CALL(JJTMETHOD_CALL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(method_name() <TOK_LEFT_PAREN> (expr() (<TOK_COMMA> expr())*)? <TOK_RIGHT_PAREN>)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/              
|/*@bgen(jjtree) CALLOUT */
        {
          ASTCALLOUT jjtn002 = new ASTCALLOUT(JJTCALLOUT);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/	(<TOK_CALLOUT> <TOK_LEFT_PAREN> string_literal() (<TOK_COMMA> callout_arg())* <TOK_RIGHT_PAREN>)/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/         
}

void method_name()      : 
{}
{
	id() 
}

void location()      : 
{}
{	LOOKAHEAD(3)
	(id() <TOK_LEFT_BRACKET> expr()/*@bgen(jjtree) #LOCATION_OFFSET( 2) */
                                        {
                                          ASTLOCATION_OFFSET jjtn001 = new ASTLOCATION_OFFSET(JJTLOCATION_OFFSET);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
                                        }
                                        try {
/*@egen*/ <TOK_RIGHT_BRACKET>/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  2);
                                          }
                                        }
/*@egen*/                    )
|	id()
}

void expr()      :
{}
{
	expr_conditional_and()
	(
		(<TOK_OR>/*@bgen(jjtree) #OR( 2) */
                          {
                            ASTOR jjtn001 = new ASTOR(JJTOR);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*/ expr_conditional_and()/*@bgen(jjtree)*/
                          } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              throw (RuntimeException)jjte001;
                            }
                            if (jjte001 instanceof ParseException) {
                              throw (ParseException)jjte001;
                            }
                            throw (Error)jjte001;
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
                            }
                          }
/*@egen*/       )
	)*
}

void expr_conditional_and()      :
{}
{
	expr_equality()
	(
		(<TOK_AND>/*@bgen(jjtree) #AND( 2) */
                           {
                             ASTAND jjtn001 = new ASTAND(JJTAND);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                           }
                           try {
/*@egen*/ expr_equality()/*@bgen(jjtree)*/
                           } catch (Throwable jjte001) {
                             if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               throw (RuntimeException)jjte001;
                             }
                             if (jjte001 instanceof ParseException) {
                               throw (ParseException)jjte001;
                             }
                             throw (Error)jjte001;
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  2);
                             }
                           }
/*@egen*/        )
	)* 
}

void expr_equality()      :
{}
{
	expr_relational()
	(
		(<TOK_EQUAL_EQUAL>/*@bgen(jjtree) #EQUAL( 2) */
                                   {
                                     ASTEQUAL jjtn001 = new ASTEQUAL(JJTEQUAL);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
                                   }
                                   try {
/*@egen*/ expr_relational()/*@bgen(jjtree)*/
                                   } catch (Throwable jjte001) {
                                     if (jjtc001) {
                                       jjtree.clearNodeScope(jjtn001);
                                       jjtc001 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte001 instanceof RuntimeException) {
                                       throw (RuntimeException)jjte001;
                                     }
                                     if (jjte001 instanceof ParseException) {
                                       throw (ParseException)jjte001;
                                     }
                                     throw (Error)jjte001;
                                   } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001,  2);
                                     }
                                   }
/*@egen*/          )
	|	(<TOK_NOT_EQUAL>/*@bgen(jjtree) #NOT_EQUAL( 2) */
                                 {
                                   ASTNOT_EQUAL jjtn002 = new ASTNOT_EQUAL(JJTNOT_EQUAL);
                                   boolean jjtc002 = true;
                                   jjtree.openNodeScope(jjtn002);
                                 }
                                 try {
/*@egen*/ expr_relational()/*@bgen(jjtree)*/
                                 } catch (Throwable jjte002) {
                                   if (jjtc002) {
                                     jjtree.clearNodeScope(jjtn002);
                                     jjtc002 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte002 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte002;
                                   }
                                   if (jjte002 instanceof ParseException) {
                                     throw (ParseException)jjte002;
                                   }
                                   throw (Error)jjte002;
                                 } finally {
                                   if (jjtc002) {
                                     jjtree.closeNodeScope(jjtn002,  2);
                                   }
                                 }
/*@egen*/              )
	)*
}

void expr_relational()      :
{}
{
	expr_addition_subtraction()
	(
		(<TOK_GREATER>/*@bgen(jjtree) #GREATER( 2) */
                               {
                                 ASTGREATER jjtn001 = new ASTGREATER(JJTGREATER);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                               }
                               try {
/*@egen*/ expr_addition_subtraction()/*@bgen(jjtree)*/
                               } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte001;
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   throw (ParseException)jjte001;
                                 }
                                 throw (Error)jjte001;
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                 }
                               }
/*@egen*/            )
	|	(<TOK_GREATER_OR_EQUAL>/*@bgen(jjtree) #GREATER_OR_EQUAL( 2) */
                                        {
                                          ASTGREATER_OR_EQUAL jjtn002 = new ASTGREATER_OR_EQUAL(JJTGREATER_OR_EQUAL);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
                                        }
                                        try {
/*@egen*/ expr_addition_subtraction()/*@bgen(jjtree)*/
                                        } catch (Throwable jjte002) {
                                          if (jjtc002) {
                                            jjtree.clearNodeScope(jjtn002);
                                            jjtc002 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte002 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte002;
                                          }
                                          if (jjte002 instanceof ParseException) {
                                            throw (ParseException)jjte002;
                                          }
                                          throw (Error)jjte002;
                                        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  2);
                                          }
                                        }
/*@egen*/                     )
	|	(<TOK_LESSER>/*@bgen(jjtree) #LESSER( 2) */
                              {
                                ASTLESSER jjtn003 = new ASTLESSER(JJTLESSER);
                                boolean jjtc003 = true;
                                jjtree.openNodeScope(jjtn003);
                              }
                              try {
/*@egen*/ expr_addition_subtraction()/*@bgen(jjtree)*/
                              } catch (Throwable jjte003) {
                                if (jjtc003) {
                                  jjtree.clearNodeScope(jjtn003);
                                  jjtc003 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte003 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte003;
                                }
                                if (jjte003 instanceof ParseException) {
                                  throw (ParseException)jjte003;
                                }
                                throw (Error)jjte003;
                              } finally {
                                if (jjtc003) {
                                  jjtree.closeNodeScope(jjtn003,  2);
                                }
                              }
/*@egen*/           )
	|	(<TOK_LESSER_OR_EQUAL>/*@bgen(jjtree) #LESSER_OR_EQUAL( 2) */
                                       {
                                         ASTLESSER_OR_EQUAL jjtn004 = new ASTLESSER_OR_EQUAL(JJTLESSER_OR_EQUAL);
                                         boolean jjtc004 = true;
                                         jjtree.openNodeScope(jjtn004);
                                       }
                                       try {
/*@egen*/ expr_addition_subtraction()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte004) {
                                         if (jjtc004) {
                                           jjtree.clearNodeScope(jjtn004);
                                           jjtc004 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte004 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte004;
                                         }
                                         if (jjte004 instanceof ParseException) {
                                           throw (ParseException)jjte004;
                                         }
                                         throw (Error)jjte004;
                                       } finally {
                                         if (jjtc004) {
                                           jjtree.closeNodeScope(jjtn004,  2);
                                         }
                                       }
/*@egen*/                    )
	)*
}

void expr_addition_subtraction()      :
{}
{
	expr_mult_div_remainder()
	(
		(<TOK_PLUS>/*@bgen(jjtree) #PLUS( 2) */
                            {
                              ASTPLUS jjtn001 = new ASTPLUS(JJTPLUS);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*/ expr_mult_div_remainder()/*@bgen(jjtree)*/
                            } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                throw (RuntimeException)jjte001;
                              }
                              if (jjte001 instanceof ParseException) {
                                throw (ParseException)jjte001;
                              }
                              throw (Error)jjte001;
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
                            }
/*@egen*/         )
	|	(<TOK_MINUS>/*@bgen(jjtree) #MINUS( 2) */
                             {
                               ASTMINUS jjtn002 = new ASTMINUS(JJTMINUS);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
                             }
                             try {
/*@egen*/ expr_mult_div_remainder()/*@bgen(jjtree)*/
                             } catch (Throwable jjte002) {
                               if (jjtc002) {
                                 jjtree.clearNodeScope(jjtn002);
                                 jjtc002 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte002 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte002;
                               }
                               if (jjte002 instanceof ParseException) {
                                 throw (ParseException)jjte002;
                               }
                               throw (Error)jjte002;
                             } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002,  2);
                               }
                             }
/*@egen*/          )
	)*
}

void expr_mult_div_remainder()      :
{}
{
	expr_logical_not()
	(
		(<TOK_MULTIPLY>/*@bgen(jjtree) #TIMES( 2) */
                                {
                                  ASTTIMES jjtn001 = new ASTTIMES(JJTTIMES);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                }
                                try {
/*@egen*/ expr_logical_not()/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                  }
                                }
/*@egen*/          )
	|	(<TOK_DIVIDE>/*@bgen(jjtree) #OVER( 2) */
                              {
                                ASTOVER jjtn002 = new ASTOVER(JJTOVER);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
                              }
                              try {
/*@egen*/ expr_logical_not()/*@bgen(jjtree)*/
                              } catch (Throwable jjte002) {
                                if (jjtc002) {
                                  jjtree.clearNodeScope(jjtn002);
                                  jjtc002 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte002 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte002;
                                }
                                if (jjte002 instanceof ParseException) {
                                  throw (ParseException)jjte002;
                                }
                                throw (Error)jjte002;
                              } finally {
                                if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002,  2);
                                }
                              }
/*@egen*/         )
	|	(<TOK_MODULE>/*@bgen(jjtree) #MODULE( 2) */
                              {
                                ASTMODULE jjtn003 = new ASTMODULE(JJTMODULE);
                                boolean jjtc003 = true;
                                jjtree.openNodeScope(jjtn003);
                              }
                              try {
/*@egen*/ expr_logical_not()/*@bgen(jjtree)*/
                              } catch (Throwable jjte003) {
                                if (jjtc003) {
                                  jjtree.clearNodeScope(jjtn003);
                                  jjtc003 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte003 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte003;
                                }
                                if (jjte003 instanceof ParseException) {
                                  throw (ParseException)jjte003;
                                }
                                throw (Error)jjte003;
                              } finally {
                                if (jjtc003) {
                                  jjtree.closeNodeScope(jjtn003,  2);
                                }
                              }
/*@egen*/           )
	)*
}

void expr_logical_not()      :
{}
{
	<TOK_NOT>/*@bgen(jjtree) #LOGICAL_NOT( 1) */
                  {
                    ASTLOGICAL_NOT jjtn001 = new ASTLOGICAL_NOT(JJTLOGICAL_NOT);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/ expr_unary_minus()/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  1);
                    }
                  }
/*@egen*/                
|	expr_unary_minus()
}

void expr_unary_minus()      :
{}
{
	<TOK_MINUS>/*@bgen(jjtree) #UNARY_MINUS( 1) */
                    {
                      ASTUNARY_MINUS jjtn001 = new ASTUNARY_MINUS(JJTUNARY_MINUS);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*/ prime()/*@bgen(jjtree)*/
                    } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        throw (RuntimeException)jjte001;
                      }
                      if (jjte001 instanceof ParseException) {
                        throw (ParseException)jjte001;
                      }
                      throw (Error)jjte001;
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  1);
                      }
                    }
/*@egen*/                
|	prime()
}

void location_or_method_call()      :
{}
{
	LOOKAHEAD(2)
	method_call()
|	location()
}

void prime()      : 
{}
{	
	location_or_method_call()
|	literal()
|	<TOK_LEFT_PAREN> expr() <TOK_RIGHT_PAREN> 
}

void callout_arg()      : 
{}	
{
	LOOKAHEAD(2)
	expr() | string_literal()	
}

void literal()      : 
{}	
{	LOOKAHEAD(2)
	int_literal() | char_literal() | bool_literal()
}

void id()    : 
{/*@bgen(jjtree) ID */
  ASTID jjtn000 = new ASTID(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token token; }
{/*@bgen(jjtree) ID */
        try {
/*@egen*/
	token = <ID>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.value = token.image; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void int_literal()      : 
{}	
{	LOOKAHEAD(3)
	decimal_literal() | hex_literal()
}

void decimal_literal()                 : 
{/*@bgen(jjtree) DECIMAL_LITERAL */
  ASTDECIMAL_LITERAL jjtn000 = new ASTDECIMAL_LITERAL(JJTDECIMAL_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token token; }
{/*@bgen(jjtree) DECIMAL_LITERAL */
        try {
/*@egen*/
	token = <TOK_NUMBERS>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ { jjtn000.value = token.image; System.out.println("DECIMAL:" + jjtn000.value);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void hex_literal()	            : 
{/*@bgen(jjtree) HEX_LITERAL */
  ASTHEX_LITERAL jjtn000 = new ASTHEX_LITERAL(JJTHEX_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token token; }
{/*@bgen(jjtree) HEX_LITERAL */
        try {
/*@egen*/
	token = <TOK_HEX>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ { jjtn000.value = token.image; System.out.println("HEX:" + jjtn000.value);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void bool_literal()              : 
{/*@bgen(jjtree) BOOL_LITERAL */
  ASTBOOL_LITERAL jjtn000 = new ASTBOOL_LITERAL(JJTBOOL_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token token; }
{/*@bgen(jjtree) BOOL_LITERAL */
        try {
/*@egen*/
	token = <TOK_TRUE>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ { jjtn000.value = token.image; System.out.println("BOOL:" + jjtn000.value); }
| 	token = <TOK_FALSE>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ { jjtn000.value = token.image; System.out.println("BOOL:" + jjtn000.value); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void char_literal()                   : 
{/*@bgen(jjtree) CHARACTER_LITERAL */
  ASTCHARACTER_LITERAL jjtn000 = new ASTCHARACTER_LITERAL(JJTCHARACTER_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token token; }
{/*@bgen(jjtree) CHARACTER_LITERAL */
        try {
/*@egen*/
	token =  <CHARACTER_LITERAL>/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ { jjtn000.value = token.image; System.out.println("CHAR:" + jjtn000.value); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void string_literal()                : 
{/*@bgen(jjtree) STRING_LITERAL */
  ASTSTRING_LITERAL jjtn000 = new ASTSTRING_LITERAL(JJTSTRING_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token token; }
{/*@bgen(jjtree) STRING_LITERAL */
        try {
/*@egen*/
	token = <TOK_STRING_LITERAL>/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ { jjtn000.value = token.image; System.out.println("STRING:" + jjtn000.value); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

